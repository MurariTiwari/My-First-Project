{"subject":"ds","topic":"Asymptotic Analysis","content":"Asymptotic analysis of an algorithm refers to defining the mathematical\r\nboundation/framing of its run-time performance. Using asymptotic analysis, we can very\r\nwell conclude the best case, average case, and worst case scenario of an algorithm.\r\nAsymptotic analysis is input bound i.e., if there's no input to the algorithm, it is concluded\r\nto work in a constant time. Other than the \"input\" all other factors are considered constant.\r\nAsymptotic analysis refers to computing the running time of any operation in mathematical\r\nunits of computation. For example, the running time of one operation is computed as f(n)\r\nand may be for another operation it is computed as g(n2). This means the first operation\r\nrunning time will increase linearly with the increase in n and the running time of the second\r\noperation will increase exponentially when n increases. Similarly, the running time of both\r\noperations will be nearly the same if n is significantly small.\r\nUsually, the time required by an algorithm falls under three types &#8722;\r\n&#61623; Best Case &#8722; Minimum time required for program execution.\r\n&#61623; Average Case &#8722; Average time required for program execution.\r\n&#61623; Worst Case &#8722; Maximum time required for program execution."},{"subject":"ds","topic":"Asymptotic Notations","content":"Following are the commonly used asymptotic notations to calculate the running time\r\ncomplexity of an algorithm.\r\n&#61623; &#927; Notation\r\n&#61623; &#937; Notation\r\n&#61623; &#952; Notation\r\nBig Oh Notation, &#927;\r\nThe notation &#927;(n) is the formal way to express the upper bound of an algorithm's running\r\ntime. It measures the worst case time complexity or the longest amount of time an\r\nalgorithm can possibly take to complete."},{"subject":"ds","topic":"Linked List","content":"A linked list is a sequence of data structures, which are connected together via links.\r\nLinked List is a sequence of links which contains items. Each link contains a connection to\r\nanother link. Linked list is the second most-used data structure after array. Following are\r\nthe important terms to understand the concept of Linked List.\r\n&#61623; Link &#8722; Each link of a linked list can store a data called an element.\r\n&#61623; Next &#8722; Each link of a linked list contains a link to the next link called Next.\r\n&#61623; Linked List &#8722; A Linked List contains the connection link to the first link called\r\nFirst."},{"subject":"ds","topic":"program","content":"#include <stdio.h>\r\n#include <string.h>\r\n#include <stdlib.h>\r\n#include <stdbool.h>\r\nstruct node\r\n{\r\nint data;\r\nint key;\r\nstruct node *next;\r\n};\r\nstruct node *head = NULL;\r\nstruct node *current = NULL;\r\n//display the list\r\nvoid printList()\r\n{\r\nstruct node *ptr = head;\r\nprintf(\"\\n[ \");\r\n//start from the beginning\r\nwhile(ptr != NULL)\r\n{\r\nprintf(\"(%d,%d) \",ptr->key,ptr->data);\r\nptr = ptr->next;\r\n}\r\nprintf(\" ]\");\r\n}\r\n//insert link at the first location\r\nvoid insertFirst(int key, int data)\r\n{\r\n//create a link\r\nstruct node *link = (struct node*) malloc(sizeof(struct node));\r\nData Structures & Algorithms\r\n48\r\nlink->key = key;\r\nlink->data = data;\r\n//point it to old first node\r\nlink->next = head;\r\n//point first to new first node\r\nhead = link;\r\n}\r\n//delete first item\r\nstruct node* deleteFirst()\r\n{\r\n//save reference to first link\r\nstruct node *tempLink = head;\r\n//mark next to first link as first\r\nhead = head->next;\r\n//return the deleted link\r\nreturn tempLink;\r\n}\r\n//is list empty\r\nbool isEmpty()\r\n{\r\nreturn head == NULL;\r\n}\r\nint length()\r\n{\r\nint length = 0;\r\nstruct node *current;\r\nfor(current = head; current != NULL; current = current->next)"},{"subject":"ds","topic":"program","content":"#include <stdio.h>\r\n#include <string.h>\r\n#include <stdlib.h>\r\n#include <stdbool.h>\r\nstruct node\r\n{\r\nint data;\r\nint key;\r\nstruct node *next;\r\n};\r\nstruct node *head = NULL;\r\nstruct node *current = NULL;\r\n//display the list\r\nvoid printList()\r\n{\r\nstruct node *ptr = head;\r\nprintf(\"\\n[ \");\r\n//start from the beginning\r\nwhile(ptr != NULL)\r\n{\r\nprintf(\"(%d,%d) \",ptr->key,ptr->data);\r\nptr = ptr->next;\r\n}\r\nprintf(\" ]\");\r\n}\r\n//insert link at the first location\r\nvoid insertFirst(int key, int data)\r\n{\r\n//create a link\r\nstruct node *link = (struct node*) malloc(sizeof(struct node));\r\nData Structures & Algorithms\r\n48\r\nlink->key = key;\r\nlink->data = data;\r\n//point it to old first node\r\nlink->next = head;\r\n//point first to new first node\r\nhead = link;\r\n}\r\n//delete first item</br>\r\nstruct node* deleteFirst()</br>\r\n{</br>\r\n//save reference to first link</br>\r\nstruct node *tempLink = head;</br>\r\n//mark next to first link as first</br>\r\nhead = head->next;</br>\r\n//return the deleted link</br>\r\nreturn tempLink;</br>\r\n}</br>\r\n//is list empty</br>\r\nbool isEmpty()</br>\r\n{</br>\r\nreturn head == NULL;</br>\r\n}</br>\r\nint length()</br>\r\n{</br>\r\nint length = 0;</br>\r\nstruct node *current;</br>\r\nfor(current = head; current != NULL; current = current->next)</br>"},{"subject":"ds","topic":"Doubly Linked List","content":"Doubly Linked List is a variation of Linked list in which navigation is possible in both ways,\r\neither forward and backward easily as compared to Single Linked List. Following are the\r\nimportant terms to understand the concept of doubly linked list.\r\n&#61623; Link &#8722; Each link of a linked list can store a data called an element.\r\n&#61623; Next &#8722; Each link of a linked list contains a link to the next link called Next.\r\n&#61623; Prev &#8722; Each link of a linked list contains a link to the previous link called Prev.\r\n&#61623; Linked List &#8722; A Linked List contains the connection link to the first link called\r\nFirst and to the last link called Last."},{"subject":"ds","topic":"array","content":"array are collection of similar data type\r\n "},{"subject":"ds","topic":"bcd","content":"jytdoiawurp0t8jfl0l86;0pj9aen08'aepnr6"}